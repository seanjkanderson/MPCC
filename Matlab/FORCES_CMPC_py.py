#FORCES_CMPC : A fast customized optimization solver.
#
#Copyright (C) 2013-2021 EMBOTECH AG [info@embotech.com]. All rights reserved.
#
#
#This software is intended for simulation and testing purposes only. 
#Use of this software for any commercial purpose is prohibited.
#
#This program is distributed in the hope that it will be useful.
#EMBOTECH makes NO WARRANTIES with respect to the use of the software 
#without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
#PARTICULAR PURPOSE. 
#
#EMBOTECH shall not have any liability for any damage arising from the use
#of the software.
#
#This Agreement shall exclusively be governed by and interpreted in 
#accordance with the laws of Switzerland, excluding its principles
#of conflict of laws. The Courts of Zurich-City shall have exclusive 
#jurisdiction in case of any dispute.
#
#def __init__():
'''
a Python wrapper for a fast solver generated by FORCESPRO v4.2.0

   OUTPUT = FORCES_CMPC_py.FORCES_CMPC_solve(PARAMS) solves a multistage problem
   subject to the parameters supplied in the following dictionary:
       PARAMS['minusA_times_x0'] - column vector of length 10
       PARAMS['equality_rhs1'] - column vector of length 10
       PARAMS['equality_rhs2'] - column vector of length 10
       PARAMS['equality_rhs3'] - column vector of length 10
       PARAMS['equality_rhs4'] - column vector of length 10
       PARAMS['equality_rhs5'] - column vector of length 10
       PARAMS['equality_rhs6'] - column vector of length 10
       PARAMS['equality_rhs7'] - column vector of length 10
       PARAMS['equality_rhs8'] - column vector of length 10
       PARAMS['equality_rhs9'] - column vector of length 10
       PARAMS['equality_rhs10'] - column vector of length 10
       PARAMS['equality_rhs11'] - column vector of length 10
       PARAMS['equality_rhs12'] - column vector of length 10
       PARAMS['equality_rhs13'] - column vector of length 10
       PARAMS['equality_rhs14'] - column vector of length 10
       PARAMS['equality_rhs15'] - column vector of length 10
       PARAMS['equality_rhs16'] - column vector of length 10
       PARAMS['equality_rhs17'] - column vector of length 10
       PARAMS['equality_rhs18'] - column vector of length 10
       PARAMS['equality_rhs19'] - column vector of length 10
       PARAMS['equality_rhs20'] - column vector of length 10
       PARAMS['equality_rhs21'] - column vector of length 10
       PARAMS['equality_rhs22'] - column vector of length 10
       PARAMS['equality_rhs23'] - column vector of length 10
       PARAMS['equality_rhs24'] - column vector of length 10
       PARAMS['equality_rhs25'] - column vector of length 10
       PARAMS['equality_rhs26'] - column vector of length 10
       PARAMS['equality_rhs27'] - column vector of length 10
       PARAMS['equality_rhs28'] - column vector of length 10
       PARAMS['equality_rhs29'] - column vector of length 10
       PARAMS['equality_rhs30'] - column vector of length 10
       PARAMS['equality_rhs31'] - column vector of length 10
       PARAMS['equality_rhs32'] - column vector of length 10
       PARAMS['equality_rhs33'] - column vector of length 10
       PARAMS['equality_rhs34'] - column vector of length 10
       PARAMS['equality_rhs35'] - column vector of length 10
       PARAMS['equality_rhs36'] - column vector of length 10
       PARAMS['equality_rhs37'] - column vector of length 10
       PARAMS['equality_rhs38'] - column vector of length 10
       PARAMS['equality_rhs39'] - column vector of length 10
       PARAMS['equality_rhs40'] - column vector of length 10
       PARAMS['equality1'] - matrix of size [10 x 13]
       PARAMS['equality2'] - matrix of size [10 x 13]
       PARAMS['equality3'] - matrix of size [10 x 13]
       PARAMS['equality4'] - matrix of size [10 x 13]
       PARAMS['equality5'] - matrix of size [10 x 13]
       PARAMS['equality6'] - matrix of size [10 x 13]
       PARAMS['equality7'] - matrix of size [10 x 13]
       PARAMS['equality8'] - matrix of size [10 x 13]
       PARAMS['equality9'] - matrix of size [10 x 13]
       PARAMS['equality10'] - matrix of size [10 x 13]
       PARAMS['equality11'] - matrix of size [10 x 13]
       PARAMS['equality12'] - matrix of size [10 x 13]
       PARAMS['equality13'] - matrix of size [10 x 13]
       PARAMS['equality14'] - matrix of size [10 x 13]
       PARAMS['equality15'] - matrix of size [10 x 13]
       PARAMS['equality16'] - matrix of size [10 x 13]
       PARAMS['equality17'] - matrix of size [10 x 13]
       PARAMS['equality18'] - matrix of size [10 x 13]
       PARAMS['equality19'] - matrix of size [10 x 13]
       PARAMS['equality20'] - matrix of size [10 x 13]
       PARAMS['equality21'] - matrix of size [10 x 13]
       PARAMS['equality22'] - matrix of size [10 x 13]
       PARAMS['equality23'] - matrix of size [10 x 13]
       PARAMS['equality24'] - matrix of size [10 x 13]
       PARAMS['equality25'] - matrix of size [10 x 13]
       PARAMS['equality26'] - matrix of size [10 x 13]
       PARAMS['equality27'] - matrix of size [10 x 13]
       PARAMS['equality28'] - matrix of size [10 x 13]
       PARAMS['equality29'] - matrix of size [10 x 13]
       PARAMS['equality30'] - matrix of size [10 x 13]
       PARAMS['equality31'] - matrix of size [10 x 13]
       PARAMS['equality32'] - matrix of size [10 x 13]
       PARAMS['equality33'] - matrix of size [10 x 13]
       PARAMS['equality34'] - matrix of size [10 x 13]
       PARAMS['equality35'] - matrix of size [10 x 13]
       PARAMS['equality36'] - matrix of size [10 x 13]
       PARAMS['equality37'] - matrix of size [10 x 13]
       PARAMS['equality38'] - matrix of size [10 x 13]
       PARAMS['equality39'] - matrix of size [10 x 13]
       PARAMS['equality40'] - matrix of size [10 x 13]
       PARAMS['cost_H1'] - matrix of size [13 x 13]
       PARAMS['cost_H2'] - matrix of size [13 x 13]
       PARAMS['cost_H3'] - matrix of size [13 x 13]
       PARAMS['cost_H4'] - matrix of size [13 x 13]
       PARAMS['cost_H5'] - matrix of size [13 x 13]
       PARAMS['cost_H6'] - matrix of size [13 x 13]
       PARAMS['cost_H7'] - matrix of size [13 x 13]
       PARAMS['cost_H8'] - matrix of size [13 x 13]
       PARAMS['cost_H9'] - matrix of size [13 x 13]
       PARAMS['cost_H10'] - matrix of size [13 x 13]
       PARAMS['cost_H11'] - matrix of size [13 x 13]
       PARAMS['cost_H12'] - matrix of size [13 x 13]
       PARAMS['cost_H13'] - matrix of size [13 x 13]
       PARAMS['cost_H14'] - matrix of size [13 x 13]
       PARAMS['cost_H15'] - matrix of size [13 x 13]
       PARAMS['cost_H16'] - matrix of size [13 x 13]
       PARAMS['cost_H17'] - matrix of size [13 x 13]
       PARAMS['cost_H18'] - matrix of size [13 x 13]
       PARAMS['cost_H19'] - matrix of size [13 x 13]
       PARAMS['cost_H20'] - matrix of size [13 x 13]
       PARAMS['cost_H21'] - matrix of size [13 x 13]
       PARAMS['cost_H22'] - matrix of size [13 x 13]
       PARAMS['cost_H23'] - matrix of size [13 x 13]
       PARAMS['cost_H24'] - matrix of size [13 x 13]
       PARAMS['cost_H25'] - matrix of size [13 x 13]
       PARAMS['cost_H26'] - matrix of size [13 x 13]
       PARAMS['cost_H27'] - matrix of size [13 x 13]
       PARAMS['cost_H28'] - matrix of size [13 x 13]
       PARAMS['cost_H29'] - matrix of size [13 x 13]
       PARAMS['cost_H30'] - matrix of size [13 x 13]
       PARAMS['cost_H31'] - matrix of size [13 x 13]
       PARAMS['cost_H32'] - matrix of size [13 x 13]
       PARAMS['cost_H33'] - matrix of size [13 x 13]
       PARAMS['cost_H34'] - matrix of size [13 x 13]
       PARAMS['cost_H35'] - matrix of size [13 x 13]
       PARAMS['cost_H36'] - matrix of size [13 x 13]
       PARAMS['cost_H37'] - matrix of size [13 x 13]
       PARAMS['cost_H38'] - matrix of size [13 x 13]
       PARAMS['cost_H39'] - matrix of size [13 x 13]
       PARAMS['cost_H40'] - matrix of size [13 x 13]
       PARAMS['cost_H41'] - matrix of size [13 x 13]
       PARAMS['cost_f1'] - column vector of length 13
       PARAMS['cost_f2'] - column vector of length 13
       PARAMS['cost_f3'] - column vector of length 13
       PARAMS['cost_f4'] - column vector of length 13
       PARAMS['cost_f5'] - column vector of length 13
       PARAMS['cost_f6'] - column vector of length 13
       PARAMS['cost_f7'] - column vector of length 13
       PARAMS['cost_f8'] - column vector of length 13
       PARAMS['cost_f9'] - column vector of length 13
       PARAMS['cost_f10'] - column vector of length 13
       PARAMS['cost_f11'] - column vector of length 13
       PARAMS['cost_f12'] - column vector of length 13
       PARAMS['cost_f13'] - column vector of length 13
       PARAMS['cost_f14'] - column vector of length 13
       PARAMS['cost_f15'] - column vector of length 13
       PARAMS['cost_f16'] - column vector of length 13
       PARAMS['cost_f17'] - column vector of length 13
       PARAMS['cost_f18'] - column vector of length 13
       PARAMS['cost_f19'] - column vector of length 13
       PARAMS['cost_f20'] - column vector of length 13
       PARAMS['cost_f21'] - column vector of length 13
       PARAMS['cost_f22'] - column vector of length 13
       PARAMS['cost_f23'] - column vector of length 13
       PARAMS['cost_f24'] - column vector of length 13
       PARAMS['cost_f25'] - column vector of length 13
       PARAMS['cost_f26'] - column vector of length 13
       PARAMS['cost_f27'] - column vector of length 13
       PARAMS['cost_f28'] - column vector of length 13
       PARAMS['cost_f29'] - column vector of length 13
       PARAMS['cost_f30'] - column vector of length 13
       PARAMS['cost_f31'] - column vector of length 13
       PARAMS['cost_f32'] - column vector of length 13
       PARAMS['cost_f33'] - column vector of length 13
       PARAMS['cost_f34'] - column vector of length 13
       PARAMS['cost_f35'] - column vector of length 13
       PARAMS['cost_f36'] - column vector of length 13
       PARAMS['cost_f37'] - column vector of length 13
       PARAMS['cost_f38'] - column vector of length 13
       PARAMS['cost_f39'] - column vector of length 13
       PARAMS['cost_f40'] - column vector of length 13
       PARAMS['cost_f41'] - column vector of length 13
       PARAMS['eq_D1'] - matrix of size [10 x 13]
       PARAMS['eq_D2'] - matrix of size [10 x 13]
       PARAMS['eq_D3'] - matrix of size [10 x 13]
       PARAMS['eq_D4'] - matrix of size [10 x 13]
       PARAMS['eq_D5'] - matrix of size [10 x 13]
       PARAMS['eq_D6'] - matrix of size [10 x 13]
       PARAMS['eq_D7'] - matrix of size [10 x 13]
       PARAMS['eq_D8'] - matrix of size [10 x 13]
       PARAMS['eq_D9'] - matrix of size [10 x 13]
       PARAMS['eq_D10'] - matrix of size [10 x 13]
       PARAMS['eq_D11'] - matrix of size [10 x 13]
       PARAMS['eq_D12'] - matrix of size [10 x 13]
       PARAMS['eq_D13'] - matrix of size [10 x 13]
       PARAMS['eq_D14'] - matrix of size [10 x 13]
       PARAMS['eq_D15'] - matrix of size [10 x 13]
       PARAMS['eq_D16'] - matrix of size [10 x 13]
       PARAMS['eq_D17'] - matrix of size [10 x 13]
       PARAMS['eq_D18'] - matrix of size [10 x 13]
       PARAMS['eq_D19'] - matrix of size [10 x 13]
       PARAMS['eq_D20'] - matrix of size [10 x 13]
       PARAMS['eq_D21'] - matrix of size [10 x 13]
       PARAMS['eq_D22'] - matrix of size [10 x 13]
       PARAMS['eq_D23'] - matrix of size [10 x 13]
       PARAMS['eq_D24'] - matrix of size [10 x 13]
       PARAMS['eq_D25'] - matrix of size [10 x 13]
       PARAMS['eq_D26'] - matrix of size [10 x 13]
       PARAMS['eq_D27'] - matrix of size [10 x 13]
       PARAMS['eq_D28'] - matrix of size [10 x 13]
       PARAMS['eq_D29'] - matrix of size [10 x 13]
       PARAMS['eq_D30'] - matrix of size [10 x 13]
       PARAMS['eq_D31'] - matrix of size [10 x 13]
       PARAMS['eq_D32'] - matrix of size [10 x 13]
       PARAMS['eq_D33'] - matrix of size [10 x 13]
       PARAMS['eq_D34'] - matrix of size [10 x 13]
       PARAMS['eq_D35'] - matrix of size [10 x 13]
       PARAMS['eq_D36'] - matrix of size [10 x 13]
       PARAMS['eq_D37'] - matrix of size [10 x 13]
       PARAMS['eq_D38'] - matrix of size [10 x 13]
       PARAMS['eq_D39'] - matrix of size [10 x 13]
       PARAMS['eq_D40'] - matrix of size [10 x 13]
       PARAMS['eq_D41'] - matrix of size [10 x 13]
       PARAMS['polytopic_A1'] - matrix of size [2 x 13]
       PARAMS['polytopic_A2'] - matrix of size [2 x 13]
       PARAMS['polytopic_A3'] - matrix of size [2 x 13]
       PARAMS['polytopic_A4'] - matrix of size [2 x 13]
       PARAMS['polytopic_A5'] - matrix of size [2 x 13]
       PARAMS['polytopic_A6'] - matrix of size [2 x 13]
       PARAMS['polytopic_A7'] - matrix of size [2 x 13]
       PARAMS['polytopic_A8'] - matrix of size [2 x 13]
       PARAMS['polytopic_A9'] - matrix of size [2 x 13]
       PARAMS['polytopic_A10'] - matrix of size [2 x 13]
       PARAMS['polytopic_A11'] - matrix of size [2 x 13]
       PARAMS['polytopic_A12'] - matrix of size [2 x 13]
       PARAMS['polytopic_A13'] - matrix of size [2 x 13]
       PARAMS['polytopic_A14'] - matrix of size [2 x 13]
       PARAMS['polytopic_A15'] - matrix of size [2 x 13]
       PARAMS['polytopic_A16'] - matrix of size [2 x 13]
       PARAMS['polytopic_A17'] - matrix of size [2 x 13]
       PARAMS['polytopic_A18'] - matrix of size [2 x 13]
       PARAMS['polytopic_A19'] - matrix of size [2 x 13]
       PARAMS['polytopic_A20'] - matrix of size [2 x 13]
       PARAMS['polytopic_A21'] - matrix of size [2 x 13]
       PARAMS['polytopic_A22'] - matrix of size [2 x 13]
       PARAMS['polytopic_A23'] - matrix of size [2 x 13]
       PARAMS['polytopic_A24'] - matrix of size [2 x 13]
       PARAMS['polytopic_A25'] - matrix of size [2 x 13]
       PARAMS['polytopic_A26'] - matrix of size [2 x 13]
       PARAMS['polytopic_A27'] - matrix of size [2 x 13]
       PARAMS['polytopic_A28'] - matrix of size [2 x 13]
       PARAMS['polytopic_A29'] - matrix of size [2 x 13]
       PARAMS['polytopic_A30'] - matrix of size [2 x 13]
       PARAMS['polytopic_A31'] - matrix of size [2 x 13]
       PARAMS['polytopic_A32'] - matrix of size [2 x 13]
       PARAMS['polytopic_A33'] - matrix of size [2 x 13]
       PARAMS['polytopic_A34'] - matrix of size [2 x 13]
       PARAMS['polytopic_A35'] - matrix of size [2 x 13]
       PARAMS['polytopic_A36'] - matrix of size [2 x 13]
       PARAMS['polytopic_A37'] - matrix of size [2 x 13]
       PARAMS['polytopic_A38'] - matrix of size [2 x 13]
       PARAMS['polytopic_A39'] - matrix of size [2 x 13]
       PARAMS['polytopic_A40'] - matrix of size [2 x 13]
       PARAMS['polytopic_A41'] - matrix of size [2 x 13]
       PARAMS['polytopic_b1'] - column vector of length 2
       PARAMS['polytopic_b2'] - column vector of length 2
       PARAMS['polytopic_b3'] - column vector of length 2
       PARAMS['polytopic_b4'] - column vector of length 2
       PARAMS['polytopic_b5'] - column vector of length 2
       PARAMS['polytopic_b6'] - column vector of length 2
       PARAMS['polytopic_b7'] - column vector of length 2
       PARAMS['polytopic_b8'] - column vector of length 2
       PARAMS['polytopic_b9'] - column vector of length 2
       PARAMS['polytopic_b10'] - column vector of length 2
       PARAMS['polytopic_b11'] - column vector of length 2
       PARAMS['polytopic_b12'] - column vector of length 2
       PARAMS['polytopic_b13'] - column vector of length 2
       PARAMS['polytopic_b14'] - column vector of length 2
       PARAMS['polytopic_b15'] - column vector of length 2
       PARAMS['polytopic_b16'] - column vector of length 2
       PARAMS['polytopic_b17'] - column vector of length 2
       PARAMS['polytopic_b18'] - column vector of length 2
       PARAMS['polytopic_b19'] - column vector of length 2
       PARAMS['polytopic_b20'] - column vector of length 2
       PARAMS['polytopic_b21'] - column vector of length 2
       PARAMS['polytopic_b22'] - column vector of length 2
       PARAMS['polytopic_b23'] - column vector of length 2
       PARAMS['polytopic_b24'] - column vector of length 2
       PARAMS['polytopic_b25'] - column vector of length 2
       PARAMS['polytopic_b26'] - column vector of length 2
       PARAMS['polytopic_b27'] - column vector of length 2
       PARAMS['polytopic_b28'] - column vector of length 2
       PARAMS['polytopic_b29'] - column vector of length 2
       PARAMS['polytopic_b30'] - column vector of length 2
       PARAMS['polytopic_b31'] - column vector of length 2
       PARAMS['polytopic_b32'] - column vector of length 2
       PARAMS['polytopic_b33'] - column vector of length 2
       PARAMS['polytopic_b34'] - column vector of length 2
       PARAMS['polytopic_b35'] - column vector of length 2
       PARAMS['polytopic_b36'] - column vector of length 2
       PARAMS['polytopic_b37'] - column vector of length 2
       PARAMS['polytopic_b38'] - column vector of length 2
       PARAMS['polytopic_b39'] - column vector of length 2
       PARAMS['polytopic_b40'] - column vector of length 2
       PARAMS['polytopic_b41'] - column vector of length 2

   OUTPUT returns the values of the last iteration of the solver where
       OUTPUT['z'] - column vector of size 533

   [OUTPUT, EXITFLAG] = FORCES_CMPC_py.FORCES_CMPC_solve(PARAMS) returns additionally
   the integer EXITFLAG indicating the state of the solution with 
       1 - Optimal solution has been found (subject to desired accuracy)
       2 - (only branch-and-bound) A feasible point has been identified for which the objective value is no more than codeoptions.mip.mipgap*100 per cent worse than the global optimum 
       0 - Timeout - maximum number of iterations reached
      -1 - (only branch-and-bound) Infeasible problem (problems solving the root relaxation to the desired accuracy)
      -2 - (only branch-and-bound) Out of memory - cannot fit branch and bound nodes into pre-allocated memory.
      -6 - NaN or INF occured during evaluation of functions and derivatives. Please check your initial guess.
      -7 - Method could not progress. Problem may be infeasible. Run FORCESdiagnostics on your problem to check for most common errors in the formulation.
     -10 - The convex solver could not proceed due to an internal error
    -100 - License error

   [OUTPUT, EXITFLAG, INFO] = FORCES_CMPC_py.FORCES_CMPC_solve(PARAMS) returns 
   additional information about the last iterate:
       INFO.it        - number of iterations that lead to this result
       INFO.it2opt    - number of convex solves
       INFO.res_eq    - max. equality constraint residual
       INFO.res_ineq  - max. inequality constraint residual
       INFO.pobj      - primal objective
       INFO.dobj      - dual objective
       INFO.dgap      - duality gap := pobj - dobj
       INFO.rdgap     - relative duality gap := |dgap / pobj|
       INFO.gradient_lag_norm - infinity norm of gradient of Lagrangian
       INFO.mu        - duality measure
       INFO.sigma     - centering parameter
       INFO.lsit_aff  - iterations of affine line search
       INFO.lsit_cc   - iterations of line search (combined direction)
       INFO.step_aff  - step size (affine direction)
       INFO.step_cc   - step size (centering direction)
       INFO.solvetime - Time needed for solve (wall clock time)

 See also COPYING

'''

import ctypes
import os
import numpy as np
import numpy.ctypeslib as npct
import sys

#_lib = ctypes.CDLL(os.path.join(os.getcwd(),'FORCES_CMPC/lib/FORCES_CMPC.so')) 
try:
    _lib = ctypes.CDLL(os.path.join(os.path.dirname(os.path.abspath(__file__)),'FORCES_CMPC/lib/FORCES_CMPC.so'))
    csolver = getattr(_lib,'FORCES_CMPC_solve')
except:
    _lib = ctypes.CDLL(os.path.join(os.path.dirname(os.path.abspath(__file__)),'FORCES_CMPC/lib/libFORCES_CMPC.so'))
    csolver = getattr(_lib,'FORCES_CMPC_solve')

class FORCES_CMPC_params_ctypes(ctypes.Structure):
#    @classmethod
#    def from_param(self):
#        return self
    _fields_ = [('minusA_times_x0', ctypes.c_double * 10),
('equality_rhs1', ctypes.c_double * 10),
('equality_rhs2', ctypes.c_double * 10),
('equality_rhs3', ctypes.c_double * 10),
('equality_rhs4', ctypes.c_double * 10),
('equality_rhs5', ctypes.c_double * 10),
('equality_rhs6', ctypes.c_double * 10),
('equality_rhs7', ctypes.c_double * 10),
('equality_rhs8', ctypes.c_double * 10),
('equality_rhs9', ctypes.c_double * 10),
('equality_rhs10', ctypes.c_double * 10),
('equality_rhs11', ctypes.c_double * 10),
('equality_rhs12', ctypes.c_double * 10),
('equality_rhs13', ctypes.c_double * 10),
('equality_rhs14', ctypes.c_double * 10),
('equality_rhs15', ctypes.c_double * 10),
('equality_rhs16', ctypes.c_double * 10),
('equality_rhs17', ctypes.c_double * 10),
('equality_rhs18', ctypes.c_double * 10),
('equality_rhs19', ctypes.c_double * 10),
('equality_rhs20', ctypes.c_double * 10),
('equality_rhs21', ctypes.c_double * 10),
('equality_rhs22', ctypes.c_double * 10),
('equality_rhs23', ctypes.c_double * 10),
('equality_rhs24', ctypes.c_double * 10),
('equality_rhs25', ctypes.c_double * 10),
('equality_rhs26', ctypes.c_double * 10),
('equality_rhs27', ctypes.c_double * 10),
('equality_rhs28', ctypes.c_double * 10),
('equality_rhs29', ctypes.c_double * 10),
('equality_rhs30', ctypes.c_double * 10),
('equality_rhs31', ctypes.c_double * 10),
('equality_rhs32', ctypes.c_double * 10),
('equality_rhs33', ctypes.c_double * 10),
('equality_rhs34', ctypes.c_double * 10),
('equality_rhs35', ctypes.c_double * 10),
('equality_rhs36', ctypes.c_double * 10),
('equality_rhs37', ctypes.c_double * 10),
('equality_rhs38', ctypes.c_double * 10),
('equality_rhs39', ctypes.c_double * 10),
('equality_rhs40', ctypes.c_double * 10),
('equality1', ctypes.c_double * 130),
('equality2', ctypes.c_double * 130),
('equality3', ctypes.c_double * 130),
('equality4', ctypes.c_double * 130),
('equality5', ctypes.c_double * 130),
('equality6', ctypes.c_double * 130),
('equality7', ctypes.c_double * 130),
('equality8', ctypes.c_double * 130),
('equality9', ctypes.c_double * 130),
('equality10', ctypes.c_double * 130),
('equality11', ctypes.c_double * 130),
('equality12', ctypes.c_double * 130),
('equality13', ctypes.c_double * 130),
('equality14', ctypes.c_double * 130),
('equality15', ctypes.c_double * 130),
('equality16', ctypes.c_double * 130),
('equality17', ctypes.c_double * 130),
('equality18', ctypes.c_double * 130),
('equality19', ctypes.c_double * 130),
('equality20', ctypes.c_double * 130),
('equality21', ctypes.c_double * 130),
('equality22', ctypes.c_double * 130),
('equality23', ctypes.c_double * 130),
('equality24', ctypes.c_double * 130),
('equality25', ctypes.c_double * 130),
('equality26', ctypes.c_double * 130),
('equality27', ctypes.c_double * 130),
('equality28', ctypes.c_double * 130),
('equality29', ctypes.c_double * 130),
('equality30', ctypes.c_double * 130),
('equality31', ctypes.c_double * 130),
('equality32', ctypes.c_double * 130),
('equality33', ctypes.c_double * 130),
('equality34', ctypes.c_double * 130),
('equality35', ctypes.c_double * 130),
('equality36', ctypes.c_double * 130),
('equality37', ctypes.c_double * 130),
('equality38', ctypes.c_double * 130),
('equality39', ctypes.c_double * 130),
('equality40', ctypes.c_double * 130),
('cost_H1', ctypes.c_double * 169),
('cost_H2', ctypes.c_double * 169),
('cost_H3', ctypes.c_double * 169),
('cost_H4', ctypes.c_double * 169),
('cost_H5', ctypes.c_double * 169),
('cost_H6', ctypes.c_double * 169),
('cost_H7', ctypes.c_double * 169),
('cost_H8', ctypes.c_double * 169),
('cost_H9', ctypes.c_double * 169),
('cost_H10', ctypes.c_double * 169),
('cost_H11', ctypes.c_double * 169),
('cost_H12', ctypes.c_double * 169),
('cost_H13', ctypes.c_double * 169),
('cost_H14', ctypes.c_double * 169),
('cost_H15', ctypes.c_double * 169),
('cost_H16', ctypes.c_double * 169),
('cost_H17', ctypes.c_double * 169),
('cost_H18', ctypes.c_double * 169),
('cost_H19', ctypes.c_double * 169),
('cost_H20', ctypes.c_double * 169),
('cost_H21', ctypes.c_double * 169),
('cost_H22', ctypes.c_double * 169),
('cost_H23', ctypes.c_double * 169),
('cost_H24', ctypes.c_double * 169),
('cost_H25', ctypes.c_double * 169),
('cost_H26', ctypes.c_double * 169),
('cost_H27', ctypes.c_double * 169),
('cost_H28', ctypes.c_double * 169),
('cost_H29', ctypes.c_double * 169),
('cost_H30', ctypes.c_double * 169),
('cost_H31', ctypes.c_double * 169),
('cost_H32', ctypes.c_double * 169),
('cost_H33', ctypes.c_double * 169),
('cost_H34', ctypes.c_double * 169),
('cost_H35', ctypes.c_double * 169),
('cost_H36', ctypes.c_double * 169),
('cost_H37', ctypes.c_double * 169),
('cost_H38', ctypes.c_double * 169),
('cost_H39', ctypes.c_double * 169),
('cost_H40', ctypes.c_double * 169),
('cost_H41', ctypes.c_double * 169),
('cost_f1', ctypes.c_double * 13),
('cost_f2', ctypes.c_double * 13),
('cost_f3', ctypes.c_double * 13),
('cost_f4', ctypes.c_double * 13),
('cost_f5', ctypes.c_double * 13),
('cost_f6', ctypes.c_double * 13),
('cost_f7', ctypes.c_double * 13),
('cost_f8', ctypes.c_double * 13),
('cost_f9', ctypes.c_double * 13),
('cost_f10', ctypes.c_double * 13),
('cost_f11', ctypes.c_double * 13),
('cost_f12', ctypes.c_double * 13),
('cost_f13', ctypes.c_double * 13),
('cost_f14', ctypes.c_double * 13),
('cost_f15', ctypes.c_double * 13),
('cost_f16', ctypes.c_double * 13),
('cost_f17', ctypes.c_double * 13),
('cost_f18', ctypes.c_double * 13),
('cost_f19', ctypes.c_double * 13),
('cost_f20', ctypes.c_double * 13),
('cost_f21', ctypes.c_double * 13),
('cost_f22', ctypes.c_double * 13),
('cost_f23', ctypes.c_double * 13),
('cost_f24', ctypes.c_double * 13),
('cost_f25', ctypes.c_double * 13),
('cost_f26', ctypes.c_double * 13),
('cost_f27', ctypes.c_double * 13),
('cost_f28', ctypes.c_double * 13),
('cost_f29', ctypes.c_double * 13),
('cost_f30', ctypes.c_double * 13),
('cost_f31', ctypes.c_double * 13),
('cost_f32', ctypes.c_double * 13),
('cost_f33', ctypes.c_double * 13),
('cost_f34', ctypes.c_double * 13),
('cost_f35', ctypes.c_double * 13),
('cost_f36', ctypes.c_double * 13),
('cost_f37', ctypes.c_double * 13),
('cost_f38', ctypes.c_double * 13),
('cost_f39', ctypes.c_double * 13),
('cost_f40', ctypes.c_double * 13),
('cost_f41', ctypes.c_double * 13),
('eq_D1', ctypes.c_double * 130),
('eq_D2', ctypes.c_double * 130),
('eq_D3', ctypes.c_double * 130),
('eq_D4', ctypes.c_double * 130),
('eq_D5', ctypes.c_double * 130),
('eq_D6', ctypes.c_double * 130),
('eq_D7', ctypes.c_double * 130),
('eq_D8', ctypes.c_double * 130),
('eq_D9', ctypes.c_double * 130),
('eq_D10', ctypes.c_double * 130),
('eq_D11', ctypes.c_double * 130),
('eq_D12', ctypes.c_double * 130),
('eq_D13', ctypes.c_double * 130),
('eq_D14', ctypes.c_double * 130),
('eq_D15', ctypes.c_double * 130),
('eq_D16', ctypes.c_double * 130),
('eq_D17', ctypes.c_double * 130),
('eq_D18', ctypes.c_double * 130),
('eq_D19', ctypes.c_double * 130),
('eq_D20', ctypes.c_double * 130),
('eq_D21', ctypes.c_double * 130),
('eq_D22', ctypes.c_double * 130),
('eq_D23', ctypes.c_double * 130),
('eq_D24', ctypes.c_double * 130),
('eq_D25', ctypes.c_double * 130),
('eq_D26', ctypes.c_double * 130),
('eq_D27', ctypes.c_double * 130),
('eq_D28', ctypes.c_double * 130),
('eq_D29', ctypes.c_double * 130),
('eq_D30', ctypes.c_double * 130),
('eq_D31', ctypes.c_double * 130),
('eq_D32', ctypes.c_double * 130),
('eq_D33', ctypes.c_double * 130),
('eq_D34', ctypes.c_double * 130),
('eq_D35', ctypes.c_double * 130),
('eq_D36', ctypes.c_double * 130),
('eq_D37', ctypes.c_double * 130),
('eq_D38', ctypes.c_double * 130),
('eq_D39', ctypes.c_double * 130),
('eq_D40', ctypes.c_double * 130),
('eq_D41', ctypes.c_double * 130),
('polytopic_A1', ctypes.c_double * 26),
('polytopic_A2', ctypes.c_double * 26),
('polytopic_A3', ctypes.c_double * 26),
('polytopic_A4', ctypes.c_double * 26),
('polytopic_A5', ctypes.c_double * 26),
('polytopic_A6', ctypes.c_double * 26),
('polytopic_A7', ctypes.c_double * 26),
('polytopic_A8', ctypes.c_double * 26),
('polytopic_A9', ctypes.c_double * 26),
('polytopic_A10', ctypes.c_double * 26),
('polytopic_A11', ctypes.c_double * 26),
('polytopic_A12', ctypes.c_double * 26),
('polytopic_A13', ctypes.c_double * 26),
('polytopic_A14', ctypes.c_double * 26),
('polytopic_A15', ctypes.c_double * 26),
('polytopic_A16', ctypes.c_double * 26),
('polytopic_A17', ctypes.c_double * 26),
('polytopic_A18', ctypes.c_double * 26),
('polytopic_A19', ctypes.c_double * 26),
('polytopic_A20', ctypes.c_double * 26),
('polytopic_A21', ctypes.c_double * 26),
('polytopic_A22', ctypes.c_double * 26),
('polytopic_A23', ctypes.c_double * 26),
('polytopic_A24', ctypes.c_double * 26),
('polytopic_A25', ctypes.c_double * 26),
('polytopic_A26', ctypes.c_double * 26),
('polytopic_A27', ctypes.c_double * 26),
('polytopic_A28', ctypes.c_double * 26),
('polytopic_A29', ctypes.c_double * 26),
('polytopic_A30', ctypes.c_double * 26),
('polytopic_A31', ctypes.c_double * 26),
('polytopic_A32', ctypes.c_double * 26),
('polytopic_A33', ctypes.c_double * 26),
('polytopic_A34', ctypes.c_double * 26),
('polytopic_A35', ctypes.c_double * 26),
('polytopic_A36', ctypes.c_double * 26),
('polytopic_A37', ctypes.c_double * 26),
('polytopic_A38', ctypes.c_double * 26),
('polytopic_A39', ctypes.c_double * 26),
('polytopic_A40', ctypes.c_double * 26),
('polytopic_A41', ctypes.c_double * 26),
('polytopic_b1', ctypes.c_double * 2),
('polytopic_b2', ctypes.c_double * 2),
('polytopic_b3', ctypes.c_double * 2),
('polytopic_b4', ctypes.c_double * 2),
('polytopic_b5', ctypes.c_double * 2),
('polytopic_b6', ctypes.c_double * 2),
('polytopic_b7', ctypes.c_double * 2),
('polytopic_b8', ctypes.c_double * 2),
('polytopic_b9', ctypes.c_double * 2),
('polytopic_b10', ctypes.c_double * 2),
('polytopic_b11', ctypes.c_double * 2),
('polytopic_b12', ctypes.c_double * 2),
('polytopic_b13', ctypes.c_double * 2),
('polytopic_b14', ctypes.c_double * 2),
('polytopic_b15', ctypes.c_double * 2),
('polytopic_b16', ctypes.c_double * 2),
('polytopic_b17', ctypes.c_double * 2),
('polytopic_b18', ctypes.c_double * 2),
('polytopic_b19', ctypes.c_double * 2),
('polytopic_b20', ctypes.c_double * 2),
('polytopic_b21', ctypes.c_double * 2),
('polytopic_b22', ctypes.c_double * 2),
('polytopic_b23', ctypes.c_double * 2),
('polytopic_b24', ctypes.c_double * 2),
('polytopic_b25', ctypes.c_double * 2),
('polytopic_b26', ctypes.c_double * 2),
('polytopic_b27', ctypes.c_double * 2),
('polytopic_b28', ctypes.c_double * 2),
('polytopic_b29', ctypes.c_double * 2),
('polytopic_b30', ctypes.c_double * 2),
('polytopic_b31', ctypes.c_double * 2),
('polytopic_b32', ctypes.c_double * 2),
('polytopic_b33', ctypes.c_double * 2),
('polytopic_b34', ctypes.c_double * 2),
('polytopic_b35', ctypes.c_double * 2),
('polytopic_b36', ctypes.c_double * 2),
('polytopic_b37', ctypes.c_double * 2),
('polytopic_b38', ctypes.c_double * 2),
('polytopic_b39', ctypes.c_double * 2),
('polytopic_b40', ctypes.c_double * 2),
('polytopic_b41', ctypes.c_double * 2),
]

FORCES_CMPC_params = {'minusA_times_x0' : np.array([]),
'equality_rhs1' : np.array([]),
'equality_rhs2' : np.array([]),
'equality_rhs3' : np.array([]),
'equality_rhs4' : np.array([]),
'equality_rhs5' : np.array([]),
'equality_rhs6' : np.array([]),
'equality_rhs7' : np.array([]),
'equality_rhs8' : np.array([]),
'equality_rhs9' : np.array([]),
'equality_rhs10' : np.array([]),
'equality_rhs11' : np.array([]),
'equality_rhs12' : np.array([]),
'equality_rhs13' : np.array([]),
'equality_rhs14' : np.array([]),
'equality_rhs15' : np.array([]),
'equality_rhs16' : np.array([]),
'equality_rhs17' : np.array([]),
'equality_rhs18' : np.array([]),
'equality_rhs19' : np.array([]),
'equality_rhs20' : np.array([]),
'equality_rhs21' : np.array([]),
'equality_rhs22' : np.array([]),
'equality_rhs23' : np.array([]),
'equality_rhs24' : np.array([]),
'equality_rhs25' : np.array([]),
'equality_rhs26' : np.array([]),
'equality_rhs27' : np.array([]),
'equality_rhs28' : np.array([]),
'equality_rhs29' : np.array([]),
'equality_rhs30' : np.array([]),
'equality_rhs31' : np.array([]),
'equality_rhs32' : np.array([]),
'equality_rhs33' : np.array([]),
'equality_rhs34' : np.array([]),
'equality_rhs35' : np.array([]),
'equality_rhs36' : np.array([]),
'equality_rhs37' : np.array([]),
'equality_rhs38' : np.array([]),
'equality_rhs39' : np.array([]),
'equality_rhs40' : np.array([]),
'equality1' : np.array([]),
'equality2' : np.array([]),
'equality3' : np.array([]),
'equality4' : np.array([]),
'equality5' : np.array([]),
'equality6' : np.array([]),
'equality7' : np.array([]),
'equality8' : np.array([]),
'equality9' : np.array([]),
'equality10' : np.array([]),
'equality11' : np.array([]),
'equality12' : np.array([]),
'equality13' : np.array([]),
'equality14' : np.array([]),
'equality15' : np.array([]),
'equality16' : np.array([]),
'equality17' : np.array([]),
'equality18' : np.array([]),
'equality19' : np.array([]),
'equality20' : np.array([]),
'equality21' : np.array([]),
'equality22' : np.array([]),
'equality23' : np.array([]),
'equality24' : np.array([]),
'equality25' : np.array([]),
'equality26' : np.array([]),
'equality27' : np.array([]),
'equality28' : np.array([]),
'equality29' : np.array([]),
'equality30' : np.array([]),
'equality31' : np.array([]),
'equality32' : np.array([]),
'equality33' : np.array([]),
'equality34' : np.array([]),
'equality35' : np.array([]),
'equality36' : np.array([]),
'equality37' : np.array([]),
'equality38' : np.array([]),
'equality39' : np.array([]),
'equality40' : np.array([]),
'cost_H1' : np.array([]),
'cost_H2' : np.array([]),
'cost_H3' : np.array([]),
'cost_H4' : np.array([]),
'cost_H5' : np.array([]),
'cost_H6' : np.array([]),
'cost_H7' : np.array([]),
'cost_H8' : np.array([]),
'cost_H9' : np.array([]),
'cost_H10' : np.array([]),
'cost_H11' : np.array([]),
'cost_H12' : np.array([]),
'cost_H13' : np.array([]),
'cost_H14' : np.array([]),
'cost_H15' : np.array([]),
'cost_H16' : np.array([]),
'cost_H17' : np.array([]),
'cost_H18' : np.array([]),
'cost_H19' : np.array([]),
'cost_H20' : np.array([]),
'cost_H21' : np.array([]),
'cost_H22' : np.array([]),
'cost_H23' : np.array([]),
'cost_H24' : np.array([]),
'cost_H25' : np.array([]),
'cost_H26' : np.array([]),
'cost_H27' : np.array([]),
'cost_H28' : np.array([]),
'cost_H29' : np.array([]),
'cost_H30' : np.array([]),
'cost_H31' : np.array([]),
'cost_H32' : np.array([]),
'cost_H33' : np.array([]),
'cost_H34' : np.array([]),
'cost_H35' : np.array([]),
'cost_H36' : np.array([]),
'cost_H37' : np.array([]),
'cost_H38' : np.array([]),
'cost_H39' : np.array([]),
'cost_H40' : np.array([]),
'cost_H41' : np.array([]),
'cost_f1' : np.array([]),
'cost_f2' : np.array([]),
'cost_f3' : np.array([]),
'cost_f4' : np.array([]),
'cost_f5' : np.array([]),
'cost_f6' : np.array([]),
'cost_f7' : np.array([]),
'cost_f8' : np.array([]),
'cost_f9' : np.array([]),
'cost_f10' : np.array([]),
'cost_f11' : np.array([]),
'cost_f12' : np.array([]),
'cost_f13' : np.array([]),
'cost_f14' : np.array([]),
'cost_f15' : np.array([]),
'cost_f16' : np.array([]),
'cost_f17' : np.array([]),
'cost_f18' : np.array([]),
'cost_f19' : np.array([]),
'cost_f20' : np.array([]),
'cost_f21' : np.array([]),
'cost_f22' : np.array([]),
'cost_f23' : np.array([]),
'cost_f24' : np.array([]),
'cost_f25' : np.array([]),
'cost_f26' : np.array([]),
'cost_f27' : np.array([]),
'cost_f28' : np.array([]),
'cost_f29' : np.array([]),
'cost_f30' : np.array([]),
'cost_f31' : np.array([]),
'cost_f32' : np.array([]),
'cost_f33' : np.array([]),
'cost_f34' : np.array([]),
'cost_f35' : np.array([]),
'cost_f36' : np.array([]),
'cost_f37' : np.array([]),
'cost_f38' : np.array([]),
'cost_f39' : np.array([]),
'cost_f40' : np.array([]),
'cost_f41' : np.array([]),
'eq_D1' : np.array([]),
'eq_D2' : np.array([]),
'eq_D3' : np.array([]),
'eq_D4' : np.array([]),
'eq_D5' : np.array([]),
'eq_D6' : np.array([]),
'eq_D7' : np.array([]),
'eq_D8' : np.array([]),
'eq_D9' : np.array([]),
'eq_D10' : np.array([]),
'eq_D11' : np.array([]),
'eq_D12' : np.array([]),
'eq_D13' : np.array([]),
'eq_D14' : np.array([]),
'eq_D15' : np.array([]),
'eq_D16' : np.array([]),
'eq_D17' : np.array([]),
'eq_D18' : np.array([]),
'eq_D19' : np.array([]),
'eq_D20' : np.array([]),
'eq_D21' : np.array([]),
'eq_D22' : np.array([]),
'eq_D23' : np.array([]),
'eq_D24' : np.array([]),
'eq_D25' : np.array([]),
'eq_D26' : np.array([]),
'eq_D27' : np.array([]),
'eq_D28' : np.array([]),
'eq_D29' : np.array([]),
'eq_D30' : np.array([]),
'eq_D31' : np.array([]),
'eq_D32' : np.array([]),
'eq_D33' : np.array([]),
'eq_D34' : np.array([]),
'eq_D35' : np.array([]),
'eq_D36' : np.array([]),
'eq_D37' : np.array([]),
'eq_D38' : np.array([]),
'eq_D39' : np.array([]),
'eq_D40' : np.array([]),
'eq_D41' : np.array([]),
'polytopic_A1' : np.array([]),
'polytopic_A2' : np.array([]),
'polytopic_A3' : np.array([]),
'polytopic_A4' : np.array([]),
'polytopic_A5' : np.array([]),
'polytopic_A6' : np.array([]),
'polytopic_A7' : np.array([]),
'polytopic_A8' : np.array([]),
'polytopic_A9' : np.array([]),
'polytopic_A10' : np.array([]),
'polytopic_A11' : np.array([]),
'polytopic_A12' : np.array([]),
'polytopic_A13' : np.array([]),
'polytopic_A14' : np.array([]),
'polytopic_A15' : np.array([]),
'polytopic_A16' : np.array([]),
'polytopic_A17' : np.array([]),
'polytopic_A18' : np.array([]),
'polytopic_A19' : np.array([]),
'polytopic_A20' : np.array([]),
'polytopic_A21' : np.array([]),
'polytopic_A22' : np.array([]),
'polytopic_A23' : np.array([]),
'polytopic_A24' : np.array([]),
'polytopic_A25' : np.array([]),
'polytopic_A26' : np.array([]),
'polytopic_A27' : np.array([]),
'polytopic_A28' : np.array([]),
'polytopic_A29' : np.array([]),
'polytopic_A30' : np.array([]),
'polytopic_A31' : np.array([]),
'polytopic_A32' : np.array([]),
'polytopic_A33' : np.array([]),
'polytopic_A34' : np.array([]),
'polytopic_A35' : np.array([]),
'polytopic_A36' : np.array([]),
'polytopic_A37' : np.array([]),
'polytopic_A38' : np.array([]),
'polytopic_A39' : np.array([]),
'polytopic_A40' : np.array([]),
'polytopic_A41' : np.array([]),
'polytopic_b1' : np.array([]),
'polytopic_b2' : np.array([]),
'polytopic_b3' : np.array([]),
'polytopic_b4' : np.array([]),
'polytopic_b5' : np.array([]),
'polytopic_b6' : np.array([]),
'polytopic_b7' : np.array([]),
'polytopic_b8' : np.array([]),
'polytopic_b9' : np.array([]),
'polytopic_b10' : np.array([]),
'polytopic_b11' : np.array([]),
'polytopic_b12' : np.array([]),
'polytopic_b13' : np.array([]),
'polytopic_b14' : np.array([]),
'polytopic_b15' : np.array([]),
'polytopic_b16' : np.array([]),
'polytopic_b17' : np.array([]),
'polytopic_b18' : np.array([]),
'polytopic_b19' : np.array([]),
'polytopic_b20' : np.array([]),
'polytopic_b21' : np.array([]),
'polytopic_b22' : np.array([]),
'polytopic_b23' : np.array([]),
'polytopic_b24' : np.array([]),
'polytopic_b25' : np.array([]),
'polytopic_b26' : np.array([]),
'polytopic_b27' : np.array([]),
'polytopic_b28' : np.array([]),
'polytopic_b29' : np.array([]),
'polytopic_b30' : np.array([]),
'polytopic_b31' : np.array([]),
'polytopic_b32' : np.array([]),
'polytopic_b33' : np.array([]),
'polytopic_b34' : np.array([]),
'polytopic_b35' : np.array([]),
'polytopic_b36' : np.array([]),
'polytopic_b37' : np.array([]),
'polytopic_b38' : np.array([]),
'polytopic_b39' : np.array([]),
'polytopic_b40' : np.array([]),
'polytopic_b41' : np.array([]),
}
params = {'minusA_times_x0' : np.array([]),
'equality_rhs1' : np.array([]),
'equality_rhs2' : np.array([]),
'equality_rhs3' : np.array([]),
'equality_rhs4' : np.array([]),
'equality_rhs5' : np.array([]),
'equality_rhs6' : np.array([]),
'equality_rhs7' : np.array([]),
'equality_rhs8' : np.array([]),
'equality_rhs9' : np.array([]),
'equality_rhs10' : np.array([]),
'equality_rhs11' : np.array([]),
'equality_rhs12' : np.array([]),
'equality_rhs13' : np.array([]),
'equality_rhs14' : np.array([]),
'equality_rhs15' : np.array([]),
'equality_rhs16' : np.array([]),
'equality_rhs17' : np.array([]),
'equality_rhs18' : np.array([]),
'equality_rhs19' : np.array([]),
'equality_rhs20' : np.array([]),
'equality_rhs21' : np.array([]),
'equality_rhs22' : np.array([]),
'equality_rhs23' : np.array([]),
'equality_rhs24' : np.array([]),
'equality_rhs25' : np.array([]),
'equality_rhs26' : np.array([]),
'equality_rhs27' : np.array([]),
'equality_rhs28' : np.array([]),
'equality_rhs29' : np.array([]),
'equality_rhs30' : np.array([]),
'equality_rhs31' : np.array([]),
'equality_rhs32' : np.array([]),
'equality_rhs33' : np.array([]),
'equality_rhs34' : np.array([]),
'equality_rhs35' : np.array([]),
'equality_rhs36' : np.array([]),
'equality_rhs37' : np.array([]),
'equality_rhs38' : np.array([]),
'equality_rhs39' : np.array([]),
'equality_rhs40' : np.array([]),
'equality1' : np.array([]),
'equality2' : np.array([]),
'equality3' : np.array([]),
'equality4' : np.array([]),
'equality5' : np.array([]),
'equality6' : np.array([]),
'equality7' : np.array([]),
'equality8' : np.array([]),
'equality9' : np.array([]),
'equality10' : np.array([]),
'equality11' : np.array([]),
'equality12' : np.array([]),
'equality13' : np.array([]),
'equality14' : np.array([]),
'equality15' : np.array([]),
'equality16' : np.array([]),
'equality17' : np.array([]),
'equality18' : np.array([]),
'equality19' : np.array([]),
'equality20' : np.array([]),
'equality21' : np.array([]),
'equality22' : np.array([]),
'equality23' : np.array([]),
'equality24' : np.array([]),
'equality25' : np.array([]),
'equality26' : np.array([]),
'equality27' : np.array([]),
'equality28' : np.array([]),
'equality29' : np.array([]),
'equality30' : np.array([]),
'equality31' : np.array([]),
'equality32' : np.array([]),
'equality33' : np.array([]),
'equality34' : np.array([]),
'equality35' : np.array([]),
'equality36' : np.array([]),
'equality37' : np.array([]),
'equality38' : np.array([]),
'equality39' : np.array([]),
'equality40' : np.array([]),
'cost_H1' : np.array([]),
'cost_H2' : np.array([]),
'cost_H3' : np.array([]),
'cost_H4' : np.array([]),
'cost_H5' : np.array([]),
'cost_H6' : np.array([]),
'cost_H7' : np.array([]),
'cost_H8' : np.array([]),
'cost_H9' : np.array([]),
'cost_H10' : np.array([]),
'cost_H11' : np.array([]),
'cost_H12' : np.array([]),
'cost_H13' : np.array([]),
'cost_H14' : np.array([]),
'cost_H15' : np.array([]),
'cost_H16' : np.array([]),
'cost_H17' : np.array([]),
'cost_H18' : np.array([]),
'cost_H19' : np.array([]),
'cost_H20' : np.array([]),
'cost_H21' : np.array([]),
'cost_H22' : np.array([]),
'cost_H23' : np.array([]),
'cost_H24' : np.array([]),
'cost_H25' : np.array([]),
'cost_H26' : np.array([]),
'cost_H27' : np.array([]),
'cost_H28' : np.array([]),
'cost_H29' : np.array([]),
'cost_H30' : np.array([]),
'cost_H31' : np.array([]),
'cost_H32' : np.array([]),
'cost_H33' : np.array([]),
'cost_H34' : np.array([]),
'cost_H35' : np.array([]),
'cost_H36' : np.array([]),
'cost_H37' : np.array([]),
'cost_H38' : np.array([]),
'cost_H39' : np.array([]),
'cost_H40' : np.array([]),
'cost_H41' : np.array([]),
'cost_f1' : np.array([]),
'cost_f2' : np.array([]),
'cost_f3' : np.array([]),
'cost_f4' : np.array([]),
'cost_f5' : np.array([]),
'cost_f6' : np.array([]),
'cost_f7' : np.array([]),
'cost_f8' : np.array([]),
'cost_f9' : np.array([]),
'cost_f10' : np.array([]),
'cost_f11' : np.array([]),
'cost_f12' : np.array([]),
'cost_f13' : np.array([]),
'cost_f14' : np.array([]),
'cost_f15' : np.array([]),
'cost_f16' : np.array([]),
'cost_f17' : np.array([]),
'cost_f18' : np.array([]),
'cost_f19' : np.array([]),
'cost_f20' : np.array([]),
'cost_f21' : np.array([]),
'cost_f22' : np.array([]),
'cost_f23' : np.array([]),
'cost_f24' : np.array([]),
'cost_f25' : np.array([]),
'cost_f26' : np.array([]),
'cost_f27' : np.array([]),
'cost_f28' : np.array([]),
'cost_f29' : np.array([]),
'cost_f30' : np.array([]),
'cost_f31' : np.array([]),
'cost_f32' : np.array([]),
'cost_f33' : np.array([]),
'cost_f34' : np.array([]),
'cost_f35' : np.array([]),
'cost_f36' : np.array([]),
'cost_f37' : np.array([]),
'cost_f38' : np.array([]),
'cost_f39' : np.array([]),
'cost_f40' : np.array([]),
'cost_f41' : np.array([]),
'eq_D1' : np.array([]),
'eq_D2' : np.array([]),
'eq_D3' : np.array([]),
'eq_D4' : np.array([]),
'eq_D5' : np.array([]),
'eq_D6' : np.array([]),
'eq_D7' : np.array([]),
'eq_D8' : np.array([]),
'eq_D9' : np.array([]),
'eq_D10' : np.array([]),
'eq_D11' : np.array([]),
'eq_D12' : np.array([]),
'eq_D13' : np.array([]),
'eq_D14' : np.array([]),
'eq_D15' : np.array([]),
'eq_D16' : np.array([]),
'eq_D17' : np.array([]),
'eq_D18' : np.array([]),
'eq_D19' : np.array([]),
'eq_D20' : np.array([]),
'eq_D21' : np.array([]),
'eq_D22' : np.array([]),
'eq_D23' : np.array([]),
'eq_D24' : np.array([]),
'eq_D25' : np.array([]),
'eq_D26' : np.array([]),
'eq_D27' : np.array([]),
'eq_D28' : np.array([]),
'eq_D29' : np.array([]),
'eq_D30' : np.array([]),
'eq_D31' : np.array([]),
'eq_D32' : np.array([]),
'eq_D33' : np.array([]),
'eq_D34' : np.array([]),
'eq_D35' : np.array([]),
'eq_D36' : np.array([]),
'eq_D37' : np.array([]),
'eq_D38' : np.array([]),
'eq_D39' : np.array([]),
'eq_D40' : np.array([]),
'eq_D41' : np.array([]),
'polytopic_A1' : np.array([]),
'polytopic_A2' : np.array([]),
'polytopic_A3' : np.array([]),
'polytopic_A4' : np.array([]),
'polytopic_A5' : np.array([]),
'polytopic_A6' : np.array([]),
'polytopic_A7' : np.array([]),
'polytopic_A8' : np.array([]),
'polytopic_A9' : np.array([]),
'polytopic_A10' : np.array([]),
'polytopic_A11' : np.array([]),
'polytopic_A12' : np.array([]),
'polytopic_A13' : np.array([]),
'polytopic_A14' : np.array([]),
'polytopic_A15' : np.array([]),
'polytopic_A16' : np.array([]),
'polytopic_A17' : np.array([]),
'polytopic_A18' : np.array([]),
'polytopic_A19' : np.array([]),
'polytopic_A20' : np.array([]),
'polytopic_A21' : np.array([]),
'polytopic_A22' : np.array([]),
'polytopic_A23' : np.array([]),
'polytopic_A24' : np.array([]),
'polytopic_A25' : np.array([]),
'polytopic_A26' : np.array([]),
'polytopic_A27' : np.array([]),
'polytopic_A28' : np.array([]),
'polytopic_A29' : np.array([]),
'polytopic_A30' : np.array([]),
'polytopic_A31' : np.array([]),
'polytopic_A32' : np.array([]),
'polytopic_A33' : np.array([]),
'polytopic_A34' : np.array([]),
'polytopic_A35' : np.array([]),
'polytopic_A36' : np.array([]),
'polytopic_A37' : np.array([]),
'polytopic_A38' : np.array([]),
'polytopic_A39' : np.array([]),
'polytopic_A40' : np.array([]),
'polytopic_A41' : np.array([]),
'polytopic_b1' : np.array([]),
'polytopic_b2' : np.array([]),
'polytopic_b3' : np.array([]),
'polytopic_b4' : np.array([]),
'polytopic_b5' : np.array([]),
'polytopic_b6' : np.array([]),
'polytopic_b7' : np.array([]),
'polytopic_b8' : np.array([]),
'polytopic_b9' : np.array([]),
'polytopic_b10' : np.array([]),
'polytopic_b11' : np.array([]),
'polytopic_b12' : np.array([]),
'polytopic_b13' : np.array([]),
'polytopic_b14' : np.array([]),
'polytopic_b15' : np.array([]),
'polytopic_b16' : np.array([]),
'polytopic_b17' : np.array([]),
'polytopic_b18' : np.array([]),
'polytopic_b19' : np.array([]),
'polytopic_b20' : np.array([]),
'polytopic_b21' : np.array([]),
'polytopic_b22' : np.array([]),
'polytopic_b23' : np.array([]),
'polytopic_b24' : np.array([]),
'polytopic_b25' : np.array([]),
'polytopic_b26' : np.array([]),
'polytopic_b27' : np.array([]),
'polytopic_b28' : np.array([]),
'polytopic_b29' : np.array([]),
'polytopic_b30' : np.array([]),
'polytopic_b31' : np.array([]),
'polytopic_b32' : np.array([]),
'polytopic_b33' : np.array([]),
'polytopic_b34' : np.array([]),
'polytopic_b35' : np.array([]),
'polytopic_b36' : np.array([]),
'polytopic_b37' : np.array([]),
'polytopic_b38' : np.array([]),
'polytopic_b39' : np.array([]),
'polytopic_b40' : np.array([]),
'polytopic_b41' : np.array([]),
}
FORCES_CMPC_params_types = {'minusA_times_x0' : np.float64,
'equality_rhs1' : np.float64,
'equality_rhs2' : np.float64,
'equality_rhs3' : np.float64,
'equality_rhs4' : np.float64,
'equality_rhs5' : np.float64,
'equality_rhs6' : np.float64,
'equality_rhs7' : np.float64,
'equality_rhs8' : np.float64,
'equality_rhs9' : np.float64,
'equality_rhs10' : np.float64,
'equality_rhs11' : np.float64,
'equality_rhs12' : np.float64,
'equality_rhs13' : np.float64,
'equality_rhs14' : np.float64,
'equality_rhs15' : np.float64,
'equality_rhs16' : np.float64,
'equality_rhs17' : np.float64,
'equality_rhs18' : np.float64,
'equality_rhs19' : np.float64,
'equality_rhs20' : np.float64,
'equality_rhs21' : np.float64,
'equality_rhs22' : np.float64,
'equality_rhs23' : np.float64,
'equality_rhs24' : np.float64,
'equality_rhs25' : np.float64,
'equality_rhs26' : np.float64,
'equality_rhs27' : np.float64,
'equality_rhs28' : np.float64,
'equality_rhs29' : np.float64,
'equality_rhs30' : np.float64,
'equality_rhs31' : np.float64,
'equality_rhs32' : np.float64,
'equality_rhs33' : np.float64,
'equality_rhs34' : np.float64,
'equality_rhs35' : np.float64,
'equality_rhs36' : np.float64,
'equality_rhs37' : np.float64,
'equality_rhs38' : np.float64,
'equality_rhs39' : np.float64,
'equality_rhs40' : np.float64,
'equality1' : np.float64,
'equality2' : np.float64,
'equality3' : np.float64,
'equality4' : np.float64,
'equality5' : np.float64,
'equality6' : np.float64,
'equality7' : np.float64,
'equality8' : np.float64,
'equality9' : np.float64,
'equality10' : np.float64,
'equality11' : np.float64,
'equality12' : np.float64,
'equality13' : np.float64,
'equality14' : np.float64,
'equality15' : np.float64,
'equality16' : np.float64,
'equality17' : np.float64,
'equality18' : np.float64,
'equality19' : np.float64,
'equality20' : np.float64,
'equality21' : np.float64,
'equality22' : np.float64,
'equality23' : np.float64,
'equality24' : np.float64,
'equality25' : np.float64,
'equality26' : np.float64,
'equality27' : np.float64,
'equality28' : np.float64,
'equality29' : np.float64,
'equality30' : np.float64,
'equality31' : np.float64,
'equality32' : np.float64,
'equality33' : np.float64,
'equality34' : np.float64,
'equality35' : np.float64,
'equality36' : np.float64,
'equality37' : np.float64,
'equality38' : np.float64,
'equality39' : np.float64,
'equality40' : np.float64,
'cost_H1' : np.float64,
'cost_H2' : np.float64,
'cost_H3' : np.float64,
'cost_H4' : np.float64,
'cost_H5' : np.float64,
'cost_H6' : np.float64,
'cost_H7' : np.float64,
'cost_H8' : np.float64,
'cost_H9' : np.float64,
'cost_H10' : np.float64,
'cost_H11' : np.float64,
'cost_H12' : np.float64,
'cost_H13' : np.float64,
'cost_H14' : np.float64,
'cost_H15' : np.float64,
'cost_H16' : np.float64,
'cost_H17' : np.float64,
'cost_H18' : np.float64,
'cost_H19' : np.float64,
'cost_H20' : np.float64,
'cost_H21' : np.float64,
'cost_H22' : np.float64,
'cost_H23' : np.float64,
'cost_H24' : np.float64,
'cost_H25' : np.float64,
'cost_H26' : np.float64,
'cost_H27' : np.float64,
'cost_H28' : np.float64,
'cost_H29' : np.float64,
'cost_H30' : np.float64,
'cost_H31' : np.float64,
'cost_H32' : np.float64,
'cost_H33' : np.float64,
'cost_H34' : np.float64,
'cost_H35' : np.float64,
'cost_H36' : np.float64,
'cost_H37' : np.float64,
'cost_H38' : np.float64,
'cost_H39' : np.float64,
'cost_H40' : np.float64,
'cost_H41' : np.float64,
'cost_f1' : np.float64,
'cost_f2' : np.float64,
'cost_f3' : np.float64,
'cost_f4' : np.float64,
'cost_f5' : np.float64,
'cost_f6' : np.float64,
'cost_f7' : np.float64,
'cost_f8' : np.float64,
'cost_f9' : np.float64,
'cost_f10' : np.float64,
'cost_f11' : np.float64,
'cost_f12' : np.float64,
'cost_f13' : np.float64,
'cost_f14' : np.float64,
'cost_f15' : np.float64,
'cost_f16' : np.float64,
'cost_f17' : np.float64,
'cost_f18' : np.float64,
'cost_f19' : np.float64,
'cost_f20' : np.float64,
'cost_f21' : np.float64,
'cost_f22' : np.float64,
'cost_f23' : np.float64,
'cost_f24' : np.float64,
'cost_f25' : np.float64,
'cost_f26' : np.float64,
'cost_f27' : np.float64,
'cost_f28' : np.float64,
'cost_f29' : np.float64,
'cost_f30' : np.float64,
'cost_f31' : np.float64,
'cost_f32' : np.float64,
'cost_f33' : np.float64,
'cost_f34' : np.float64,
'cost_f35' : np.float64,
'cost_f36' : np.float64,
'cost_f37' : np.float64,
'cost_f38' : np.float64,
'cost_f39' : np.float64,
'cost_f40' : np.float64,
'cost_f41' : np.float64,
'eq_D1' : np.float64,
'eq_D2' : np.float64,
'eq_D3' : np.float64,
'eq_D4' : np.float64,
'eq_D5' : np.float64,
'eq_D6' : np.float64,
'eq_D7' : np.float64,
'eq_D8' : np.float64,
'eq_D9' : np.float64,
'eq_D10' : np.float64,
'eq_D11' : np.float64,
'eq_D12' : np.float64,
'eq_D13' : np.float64,
'eq_D14' : np.float64,
'eq_D15' : np.float64,
'eq_D16' : np.float64,
'eq_D17' : np.float64,
'eq_D18' : np.float64,
'eq_D19' : np.float64,
'eq_D20' : np.float64,
'eq_D21' : np.float64,
'eq_D22' : np.float64,
'eq_D23' : np.float64,
'eq_D24' : np.float64,
'eq_D25' : np.float64,
'eq_D26' : np.float64,
'eq_D27' : np.float64,
'eq_D28' : np.float64,
'eq_D29' : np.float64,
'eq_D30' : np.float64,
'eq_D31' : np.float64,
'eq_D32' : np.float64,
'eq_D33' : np.float64,
'eq_D34' : np.float64,
'eq_D35' : np.float64,
'eq_D36' : np.float64,
'eq_D37' : np.float64,
'eq_D38' : np.float64,
'eq_D39' : np.float64,
'eq_D40' : np.float64,
'eq_D41' : np.float64,
'polytopic_A1' : np.float64,
'polytopic_A2' : np.float64,
'polytopic_A3' : np.float64,
'polytopic_A4' : np.float64,
'polytopic_A5' : np.float64,
'polytopic_A6' : np.float64,
'polytopic_A7' : np.float64,
'polytopic_A8' : np.float64,
'polytopic_A9' : np.float64,
'polytopic_A10' : np.float64,
'polytopic_A11' : np.float64,
'polytopic_A12' : np.float64,
'polytopic_A13' : np.float64,
'polytopic_A14' : np.float64,
'polytopic_A15' : np.float64,
'polytopic_A16' : np.float64,
'polytopic_A17' : np.float64,
'polytopic_A18' : np.float64,
'polytopic_A19' : np.float64,
'polytopic_A20' : np.float64,
'polytopic_A21' : np.float64,
'polytopic_A22' : np.float64,
'polytopic_A23' : np.float64,
'polytopic_A24' : np.float64,
'polytopic_A25' : np.float64,
'polytopic_A26' : np.float64,
'polytopic_A27' : np.float64,
'polytopic_A28' : np.float64,
'polytopic_A29' : np.float64,
'polytopic_A30' : np.float64,
'polytopic_A31' : np.float64,
'polytopic_A32' : np.float64,
'polytopic_A33' : np.float64,
'polytopic_A34' : np.float64,
'polytopic_A35' : np.float64,
'polytopic_A36' : np.float64,
'polytopic_A37' : np.float64,
'polytopic_A38' : np.float64,
'polytopic_A39' : np.float64,
'polytopic_A40' : np.float64,
'polytopic_A41' : np.float64,
'polytopic_b1' : np.float64,
'polytopic_b2' : np.float64,
'polytopic_b3' : np.float64,
'polytopic_b4' : np.float64,
'polytopic_b5' : np.float64,
'polytopic_b6' : np.float64,
'polytopic_b7' : np.float64,
'polytopic_b8' : np.float64,
'polytopic_b9' : np.float64,
'polytopic_b10' : np.float64,
'polytopic_b11' : np.float64,
'polytopic_b12' : np.float64,
'polytopic_b13' : np.float64,
'polytopic_b14' : np.float64,
'polytopic_b15' : np.float64,
'polytopic_b16' : np.float64,
'polytopic_b17' : np.float64,
'polytopic_b18' : np.float64,
'polytopic_b19' : np.float64,
'polytopic_b20' : np.float64,
'polytopic_b21' : np.float64,
'polytopic_b22' : np.float64,
'polytopic_b23' : np.float64,
'polytopic_b24' : np.float64,
'polytopic_b25' : np.float64,
'polytopic_b26' : np.float64,
'polytopic_b27' : np.float64,
'polytopic_b28' : np.float64,
'polytopic_b29' : np.float64,
'polytopic_b30' : np.float64,
'polytopic_b31' : np.float64,
'polytopic_b32' : np.float64,
'polytopic_b33' : np.float64,
'polytopic_b34' : np.float64,
'polytopic_b35' : np.float64,
'polytopic_b36' : np.float64,
'polytopic_b37' : np.float64,
'polytopic_b38' : np.float64,
'polytopic_b39' : np.float64,
'polytopic_b40' : np.float64,
'polytopic_b41' : np.float64,
}

class FORCES_CMPC_outputs_ctypes(ctypes.Structure):
#    @classmethod
#    def from_param(self):
#        return self
    _fields_ = [('z', ctypes.c_double * 533),
]

FORCES_CMPC_outputs = {'z' : np.array([]),
}


class FORCES_CMPC_info(ctypes.Structure):
#    @classmethod
#    def from_param(self):
#        return self
    _fields_ = [('it', ctypes.c_int32),
('it2opt', ctypes.c_int32),
('res_eq', ctypes.c_double),
('res_ineq', ctypes.c_double),
('pobj', ctypes.c_double),
('dobj', ctypes.c_double),
('dgap', ctypes.c_double),
('rdgap', ctypes.c_double),
('gradient_lag_norm', ctypes.c_double),
('mu', ctypes.c_double),
('mu_aff', ctypes.c_double),
('sigma', ctypes.c_double),
('lsit_aff', ctypes.c_int32),
('lsit_cc', ctypes.c_int32),
('step_aff', ctypes.c_double),
('step_cc', ctypes.c_double),
('solvetime', ctypes.c_double)
]

class FILE(ctypes.Structure):
        pass
if sys.version_info.major == 2:
    PyFile_AsFile = ctypes.pythonapi.PyFile_AsFile # problem here with python 3 http://stackoverflow.com/questions/16130268/python-3-replacement-for-pyfile-asfile
    PyFile_AsFile.argtypes = [ctypes.py_object]
    PyFile_AsFile.restype = ctypes.POINTER(FILE)

# determine data types for solver function prototype 
csolver.argtypes = ( ctypes.POINTER(FORCES_CMPC_params_ctypes), ctypes.POINTER(FORCES_CMPC_outputs_ctypes), ctypes.POINTER(FORCES_CMPC_info), ctypes.POINTER(FILE))
csolver.restype = ctypes.c_int

def FORCES_CMPC_solve(params_arg):
    '''
a Python wrapper for a fast solver generated by FORCESPRO v4.2.0

   OUTPUT = FORCES_CMPC_py.FORCES_CMPC_solve(PARAMS) solves a multistage problem
   subject to the parameters supplied in the following dictionary:
       PARAMS['minusA_times_x0'] - column vector of length 10
       PARAMS['equality_rhs1'] - column vector of length 10
       PARAMS['equality_rhs2'] - column vector of length 10
       PARAMS['equality_rhs3'] - column vector of length 10
       PARAMS['equality_rhs4'] - column vector of length 10
       PARAMS['equality_rhs5'] - column vector of length 10
       PARAMS['equality_rhs6'] - column vector of length 10
       PARAMS['equality_rhs7'] - column vector of length 10
       PARAMS['equality_rhs8'] - column vector of length 10
       PARAMS['equality_rhs9'] - column vector of length 10
       PARAMS['equality_rhs10'] - column vector of length 10
       PARAMS['equality_rhs11'] - column vector of length 10
       PARAMS['equality_rhs12'] - column vector of length 10
       PARAMS['equality_rhs13'] - column vector of length 10
       PARAMS['equality_rhs14'] - column vector of length 10
       PARAMS['equality_rhs15'] - column vector of length 10
       PARAMS['equality_rhs16'] - column vector of length 10
       PARAMS['equality_rhs17'] - column vector of length 10
       PARAMS['equality_rhs18'] - column vector of length 10
       PARAMS['equality_rhs19'] - column vector of length 10
       PARAMS['equality_rhs20'] - column vector of length 10
       PARAMS['equality_rhs21'] - column vector of length 10
       PARAMS['equality_rhs22'] - column vector of length 10
       PARAMS['equality_rhs23'] - column vector of length 10
       PARAMS['equality_rhs24'] - column vector of length 10
       PARAMS['equality_rhs25'] - column vector of length 10
       PARAMS['equality_rhs26'] - column vector of length 10
       PARAMS['equality_rhs27'] - column vector of length 10
       PARAMS['equality_rhs28'] - column vector of length 10
       PARAMS['equality_rhs29'] - column vector of length 10
       PARAMS['equality_rhs30'] - column vector of length 10
       PARAMS['equality_rhs31'] - column vector of length 10
       PARAMS['equality_rhs32'] - column vector of length 10
       PARAMS['equality_rhs33'] - column vector of length 10
       PARAMS['equality_rhs34'] - column vector of length 10
       PARAMS['equality_rhs35'] - column vector of length 10
       PARAMS['equality_rhs36'] - column vector of length 10
       PARAMS['equality_rhs37'] - column vector of length 10
       PARAMS['equality_rhs38'] - column vector of length 10
       PARAMS['equality_rhs39'] - column vector of length 10
       PARAMS['equality_rhs40'] - column vector of length 10
       PARAMS['equality1'] - matrix of size [10 x 13]
       PARAMS['equality2'] - matrix of size [10 x 13]
       PARAMS['equality3'] - matrix of size [10 x 13]
       PARAMS['equality4'] - matrix of size [10 x 13]
       PARAMS['equality5'] - matrix of size [10 x 13]
       PARAMS['equality6'] - matrix of size [10 x 13]
       PARAMS['equality7'] - matrix of size [10 x 13]
       PARAMS['equality8'] - matrix of size [10 x 13]
       PARAMS['equality9'] - matrix of size [10 x 13]
       PARAMS['equality10'] - matrix of size [10 x 13]
       PARAMS['equality11'] - matrix of size [10 x 13]
       PARAMS['equality12'] - matrix of size [10 x 13]
       PARAMS['equality13'] - matrix of size [10 x 13]
       PARAMS['equality14'] - matrix of size [10 x 13]
       PARAMS['equality15'] - matrix of size [10 x 13]
       PARAMS['equality16'] - matrix of size [10 x 13]
       PARAMS['equality17'] - matrix of size [10 x 13]
       PARAMS['equality18'] - matrix of size [10 x 13]
       PARAMS['equality19'] - matrix of size [10 x 13]
       PARAMS['equality20'] - matrix of size [10 x 13]
       PARAMS['equality21'] - matrix of size [10 x 13]
       PARAMS['equality22'] - matrix of size [10 x 13]
       PARAMS['equality23'] - matrix of size [10 x 13]
       PARAMS['equality24'] - matrix of size [10 x 13]
       PARAMS['equality25'] - matrix of size [10 x 13]
       PARAMS['equality26'] - matrix of size [10 x 13]
       PARAMS['equality27'] - matrix of size [10 x 13]
       PARAMS['equality28'] - matrix of size [10 x 13]
       PARAMS['equality29'] - matrix of size [10 x 13]
       PARAMS['equality30'] - matrix of size [10 x 13]
       PARAMS['equality31'] - matrix of size [10 x 13]
       PARAMS['equality32'] - matrix of size [10 x 13]
       PARAMS['equality33'] - matrix of size [10 x 13]
       PARAMS['equality34'] - matrix of size [10 x 13]
       PARAMS['equality35'] - matrix of size [10 x 13]
       PARAMS['equality36'] - matrix of size [10 x 13]
       PARAMS['equality37'] - matrix of size [10 x 13]
       PARAMS['equality38'] - matrix of size [10 x 13]
       PARAMS['equality39'] - matrix of size [10 x 13]
       PARAMS['equality40'] - matrix of size [10 x 13]
       PARAMS['cost_H1'] - matrix of size [13 x 13]
       PARAMS['cost_H2'] - matrix of size [13 x 13]
       PARAMS['cost_H3'] - matrix of size [13 x 13]
       PARAMS['cost_H4'] - matrix of size [13 x 13]
       PARAMS['cost_H5'] - matrix of size [13 x 13]
       PARAMS['cost_H6'] - matrix of size [13 x 13]
       PARAMS['cost_H7'] - matrix of size [13 x 13]
       PARAMS['cost_H8'] - matrix of size [13 x 13]
       PARAMS['cost_H9'] - matrix of size [13 x 13]
       PARAMS['cost_H10'] - matrix of size [13 x 13]
       PARAMS['cost_H11'] - matrix of size [13 x 13]
       PARAMS['cost_H12'] - matrix of size [13 x 13]
       PARAMS['cost_H13'] - matrix of size [13 x 13]
       PARAMS['cost_H14'] - matrix of size [13 x 13]
       PARAMS['cost_H15'] - matrix of size [13 x 13]
       PARAMS['cost_H16'] - matrix of size [13 x 13]
       PARAMS['cost_H17'] - matrix of size [13 x 13]
       PARAMS['cost_H18'] - matrix of size [13 x 13]
       PARAMS['cost_H19'] - matrix of size [13 x 13]
       PARAMS['cost_H20'] - matrix of size [13 x 13]
       PARAMS['cost_H21'] - matrix of size [13 x 13]
       PARAMS['cost_H22'] - matrix of size [13 x 13]
       PARAMS['cost_H23'] - matrix of size [13 x 13]
       PARAMS['cost_H24'] - matrix of size [13 x 13]
       PARAMS['cost_H25'] - matrix of size [13 x 13]
       PARAMS['cost_H26'] - matrix of size [13 x 13]
       PARAMS['cost_H27'] - matrix of size [13 x 13]
       PARAMS['cost_H28'] - matrix of size [13 x 13]
       PARAMS['cost_H29'] - matrix of size [13 x 13]
       PARAMS['cost_H30'] - matrix of size [13 x 13]
       PARAMS['cost_H31'] - matrix of size [13 x 13]
       PARAMS['cost_H32'] - matrix of size [13 x 13]
       PARAMS['cost_H33'] - matrix of size [13 x 13]
       PARAMS['cost_H34'] - matrix of size [13 x 13]
       PARAMS['cost_H35'] - matrix of size [13 x 13]
       PARAMS['cost_H36'] - matrix of size [13 x 13]
       PARAMS['cost_H37'] - matrix of size [13 x 13]
       PARAMS['cost_H38'] - matrix of size [13 x 13]
       PARAMS['cost_H39'] - matrix of size [13 x 13]
       PARAMS['cost_H40'] - matrix of size [13 x 13]
       PARAMS['cost_H41'] - matrix of size [13 x 13]
       PARAMS['cost_f1'] - column vector of length 13
       PARAMS['cost_f2'] - column vector of length 13
       PARAMS['cost_f3'] - column vector of length 13
       PARAMS['cost_f4'] - column vector of length 13
       PARAMS['cost_f5'] - column vector of length 13
       PARAMS['cost_f6'] - column vector of length 13
       PARAMS['cost_f7'] - column vector of length 13
       PARAMS['cost_f8'] - column vector of length 13
       PARAMS['cost_f9'] - column vector of length 13
       PARAMS['cost_f10'] - column vector of length 13
       PARAMS['cost_f11'] - column vector of length 13
       PARAMS['cost_f12'] - column vector of length 13
       PARAMS['cost_f13'] - column vector of length 13
       PARAMS['cost_f14'] - column vector of length 13
       PARAMS['cost_f15'] - column vector of length 13
       PARAMS['cost_f16'] - column vector of length 13
       PARAMS['cost_f17'] - column vector of length 13
       PARAMS['cost_f18'] - column vector of length 13
       PARAMS['cost_f19'] - column vector of length 13
       PARAMS['cost_f20'] - column vector of length 13
       PARAMS['cost_f21'] - column vector of length 13
       PARAMS['cost_f22'] - column vector of length 13
       PARAMS['cost_f23'] - column vector of length 13
       PARAMS['cost_f24'] - column vector of length 13
       PARAMS['cost_f25'] - column vector of length 13
       PARAMS['cost_f26'] - column vector of length 13
       PARAMS['cost_f27'] - column vector of length 13
       PARAMS['cost_f28'] - column vector of length 13
       PARAMS['cost_f29'] - column vector of length 13
       PARAMS['cost_f30'] - column vector of length 13
       PARAMS['cost_f31'] - column vector of length 13
       PARAMS['cost_f32'] - column vector of length 13
       PARAMS['cost_f33'] - column vector of length 13
       PARAMS['cost_f34'] - column vector of length 13
       PARAMS['cost_f35'] - column vector of length 13
       PARAMS['cost_f36'] - column vector of length 13
       PARAMS['cost_f37'] - column vector of length 13
       PARAMS['cost_f38'] - column vector of length 13
       PARAMS['cost_f39'] - column vector of length 13
       PARAMS['cost_f40'] - column vector of length 13
       PARAMS['cost_f41'] - column vector of length 13
       PARAMS['eq_D1'] - matrix of size [10 x 13]
       PARAMS['eq_D2'] - matrix of size [10 x 13]
       PARAMS['eq_D3'] - matrix of size [10 x 13]
       PARAMS['eq_D4'] - matrix of size [10 x 13]
       PARAMS['eq_D5'] - matrix of size [10 x 13]
       PARAMS['eq_D6'] - matrix of size [10 x 13]
       PARAMS['eq_D7'] - matrix of size [10 x 13]
       PARAMS['eq_D8'] - matrix of size [10 x 13]
       PARAMS['eq_D9'] - matrix of size [10 x 13]
       PARAMS['eq_D10'] - matrix of size [10 x 13]
       PARAMS['eq_D11'] - matrix of size [10 x 13]
       PARAMS['eq_D12'] - matrix of size [10 x 13]
       PARAMS['eq_D13'] - matrix of size [10 x 13]
       PARAMS['eq_D14'] - matrix of size [10 x 13]
       PARAMS['eq_D15'] - matrix of size [10 x 13]
       PARAMS['eq_D16'] - matrix of size [10 x 13]
       PARAMS['eq_D17'] - matrix of size [10 x 13]
       PARAMS['eq_D18'] - matrix of size [10 x 13]
       PARAMS['eq_D19'] - matrix of size [10 x 13]
       PARAMS['eq_D20'] - matrix of size [10 x 13]
       PARAMS['eq_D21'] - matrix of size [10 x 13]
       PARAMS['eq_D22'] - matrix of size [10 x 13]
       PARAMS['eq_D23'] - matrix of size [10 x 13]
       PARAMS['eq_D24'] - matrix of size [10 x 13]
       PARAMS['eq_D25'] - matrix of size [10 x 13]
       PARAMS['eq_D26'] - matrix of size [10 x 13]
       PARAMS['eq_D27'] - matrix of size [10 x 13]
       PARAMS['eq_D28'] - matrix of size [10 x 13]
       PARAMS['eq_D29'] - matrix of size [10 x 13]
       PARAMS['eq_D30'] - matrix of size [10 x 13]
       PARAMS['eq_D31'] - matrix of size [10 x 13]
       PARAMS['eq_D32'] - matrix of size [10 x 13]
       PARAMS['eq_D33'] - matrix of size [10 x 13]
       PARAMS['eq_D34'] - matrix of size [10 x 13]
       PARAMS['eq_D35'] - matrix of size [10 x 13]
       PARAMS['eq_D36'] - matrix of size [10 x 13]
       PARAMS['eq_D37'] - matrix of size [10 x 13]
       PARAMS['eq_D38'] - matrix of size [10 x 13]
       PARAMS['eq_D39'] - matrix of size [10 x 13]
       PARAMS['eq_D40'] - matrix of size [10 x 13]
       PARAMS['eq_D41'] - matrix of size [10 x 13]
       PARAMS['polytopic_A1'] - matrix of size [2 x 13]
       PARAMS['polytopic_A2'] - matrix of size [2 x 13]
       PARAMS['polytopic_A3'] - matrix of size [2 x 13]
       PARAMS['polytopic_A4'] - matrix of size [2 x 13]
       PARAMS['polytopic_A5'] - matrix of size [2 x 13]
       PARAMS['polytopic_A6'] - matrix of size [2 x 13]
       PARAMS['polytopic_A7'] - matrix of size [2 x 13]
       PARAMS['polytopic_A8'] - matrix of size [2 x 13]
       PARAMS['polytopic_A9'] - matrix of size [2 x 13]
       PARAMS['polytopic_A10'] - matrix of size [2 x 13]
       PARAMS['polytopic_A11'] - matrix of size [2 x 13]
       PARAMS['polytopic_A12'] - matrix of size [2 x 13]
       PARAMS['polytopic_A13'] - matrix of size [2 x 13]
       PARAMS['polytopic_A14'] - matrix of size [2 x 13]
       PARAMS['polytopic_A15'] - matrix of size [2 x 13]
       PARAMS['polytopic_A16'] - matrix of size [2 x 13]
       PARAMS['polytopic_A17'] - matrix of size [2 x 13]
       PARAMS['polytopic_A18'] - matrix of size [2 x 13]
       PARAMS['polytopic_A19'] - matrix of size [2 x 13]
       PARAMS['polytopic_A20'] - matrix of size [2 x 13]
       PARAMS['polytopic_A21'] - matrix of size [2 x 13]
       PARAMS['polytopic_A22'] - matrix of size [2 x 13]
       PARAMS['polytopic_A23'] - matrix of size [2 x 13]
       PARAMS['polytopic_A24'] - matrix of size [2 x 13]
       PARAMS['polytopic_A25'] - matrix of size [2 x 13]
       PARAMS['polytopic_A26'] - matrix of size [2 x 13]
       PARAMS['polytopic_A27'] - matrix of size [2 x 13]
       PARAMS['polytopic_A28'] - matrix of size [2 x 13]
       PARAMS['polytopic_A29'] - matrix of size [2 x 13]
       PARAMS['polytopic_A30'] - matrix of size [2 x 13]
       PARAMS['polytopic_A31'] - matrix of size [2 x 13]
       PARAMS['polytopic_A32'] - matrix of size [2 x 13]
       PARAMS['polytopic_A33'] - matrix of size [2 x 13]
       PARAMS['polytopic_A34'] - matrix of size [2 x 13]
       PARAMS['polytopic_A35'] - matrix of size [2 x 13]
       PARAMS['polytopic_A36'] - matrix of size [2 x 13]
       PARAMS['polytopic_A37'] - matrix of size [2 x 13]
       PARAMS['polytopic_A38'] - matrix of size [2 x 13]
       PARAMS['polytopic_A39'] - matrix of size [2 x 13]
       PARAMS['polytopic_A40'] - matrix of size [2 x 13]
       PARAMS['polytopic_A41'] - matrix of size [2 x 13]
       PARAMS['polytopic_b1'] - column vector of length 2
       PARAMS['polytopic_b2'] - column vector of length 2
       PARAMS['polytopic_b3'] - column vector of length 2
       PARAMS['polytopic_b4'] - column vector of length 2
       PARAMS['polytopic_b5'] - column vector of length 2
       PARAMS['polytopic_b6'] - column vector of length 2
       PARAMS['polytopic_b7'] - column vector of length 2
       PARAMS['polytopic_b8'] - column vector of length 2
       PARAMS['polytopic_b9'] - column vector of length 2
       PARAMS['polytopic_b10'] - column vector of length 2
       PARAMS['polytopic_b11'] - column vector of length 2
       PARAMS['polytopic_b12'] - column vector of length 2
       PARAMS['polytopic_b13'] - column vector of length 2
       PARAMS['polytopic_b14'] - column vector of length 2
       PARAMS['polytopic_b15'] - column vector of length 2
       PARAMS['polytopic_b16'] - column vector of length 2
       PARAMS['polytopic_b17'] - column vector of length 2
       PARAMS['polytopic_b18'] - column vector of length 2
       PARAMS['polytopic_b19'] - column vector of length 2
       PARAMS['polytopic_b20'] - column vector of length 2
       PARAMS['polytopic_b21'] - column vector of length 2
       PARAMS['polytopic_b22'] - column vector of length 2
       PARAMS['polytopic_b23'] - column vector of length 2
       PARAMS['polytopic_b24'] - column vector of length 2
       PARAMS['polytopic_b25'] - column vector of length 2
       PARAMS['polytopic_b26'] - column vector of length 2
       PARAMS['polytopic_b27'] - column vector of length 2
       PARAMS['polytopic_b28'] - column vector of length 2
       PARAMS['polytopic_b29'] - column vector of length 2
       PARAMS['polytopic_b30'] - column vector of length 2
       PARAMS['polytopic_b31'] - column vector of length 2
       PARAMS['polytopic_b32'] - column vector of length 2
       PARAMS['polytopic_b33'] - column vector of length 2
       PARAMS['polytopic_b34'] - column vector of length 2
       PARAMS['polytopic_b35'] - column vector of length 2
       PARAMS['polytopic_b36'] - column vector of length 2
       PARAMS['polytopic_b37'] - column vector of length 2
       PARAMS['polytopic_b38'] - column vector of length 2
       PARAMS['polytopic_b39'] - column vector of length 2
       PARAMS['polytopic_b40'] - column vector of length 2
       PARAMS['polytopic_b41'] - column vector of length 2

   OUTPUT returns the values of the last iteration of the solver where
       OUTPUT['z'] - column vector of size 533

   [OUTPUT, EXITFLAG] = FORCES_CMPC_py.FORCES_CMPC_solve(PARAMS) returns additionally
   the integer EXITFLAG indicating the state of the solution with 
       1 - Optimal solution has been found (subject to desired accuracy)
       2 - (only branch-and-bound) A feasible point has been identified for which the objective value is no more than codeoptions.mip.mipgap*100 per cent worse than the global optimum 
       0 - Timeout - maximum number of iterations reached
      -1 - (only branch-and-bound) Infeasible problem (problems solving the root relaxation to the desired accuracy)
      -2 - (only branch-and-bound) Out of memory - cannot fit branch and bound nodes into pre-allocated memory.
      -6 - NaN or INF occured during evaluation of functions and derivatives. Please check your initial guess.
      -7 - Method could not progress. Problem may be infeasible. Run FORCESdiagnostics on your problem to check for most common errors in the formulation.
     -10 - The convex solver could not proceed due to an internal error
    -100 - License error

   [OUTPUT, EXITFLAG, INFO] = FORCES_CMPC_py.FORCES_CMPC_solve(PARAMS) returns 
   additional information about the last iterate:
       INFO.it        - number of iterations that lead to this result
       INFO.it2opt    - number of convex solves
       INFO.res_eq    - max. equality constraint residual
       INFO.res_ineq  - max. inequality constraint residual
       INFO.pobj      - primal objective
       INFO.dobj      - dual objective
       INFO.dgap      - duality gap := pobj - dobj
       INFO.rdgap     - relative duality gap := |dgap / pobj|
       INFO.gradient_lag_norm - infinity norm of gradient of Lagrangian
       INFO.mu        - duality measure
       INFO.sigma     - centering parameter
       INFO.lsit_aff  - iterations of affine line search
       INFO.lsit_cc   - iterations of line search (combined direction)
       INFO.step_aff  - step size (affine direction)
       INFO.step_cc   - step size (centering direction)
       INFO.solvetime - Time needed for solve (wall clock time)

 See also COPYING

    '''
    global _lib

    # convert parameters
    params_py = FORCES_CMPC_params_ctypes()
    for par in params_arg:
        try:
            #setattr(params_py, par, npct.as_ctypes(np.reshape(params_arg[par],np.size(params_arg[par]),order='A')))
            if isinstance(getattr(params_py, par), ctypes.Array):
                params_arg[par] = np.require(params_arg[par], dtype=FORCES_CMPC_params_types[par], requirements='F')
                setattr(params_py, par, npct.as_ctypes(np.reshape(params_arg[par],np.size(params_arg[par]),order='F')))
            else:
                setattr(params_py, par, params_arg[par])
        except:
            raise ValueError('Parameter ' + par + ' does not have the appropriate dimensions or data type. Please use numpy arrays for parameters.')
    
    outputs_py = FORCES_CMPC_outputs_ctypes()
    info_py = FORCES_CMPC_info()
    if sys.version_info.major == 2:
        if sys.platform.startswith('win'):
            fp = None # if set to none, the solver prints to stdout by default - necessary because we have an access violation otherwise under windows
        else:
            #fp = open('stdout_temp.txt','w')
            fp = sys.stdout
        try:
            PyFile_AsFile.restype = ctypes.POINTER(FILE)
            exitflag = _lib.FORCES_CMPC_solve( ctypes.byref(params_py), ctypes.byref(outputs_py), ctypes.byref(info_py), PyFile_AsFile(fp)  )
            #fp = open('stdout_temp.txt','r')
            #print (fp.read())
            #fp.close()
        except:
            #print 'Problem with solver'
            raise
    elif sys.version_info.major == 3:
        if sys.platform.startswith('win'):
            libc = ctypes.cdll.msvcrt
        elif sys.platform.startswith('darwin'):
            libc = ctypes.CDLL('libc.dylib')
        else:
            libc = ctypes.CDLL('libc.so.6')       # Open libc
        cfopen = getattr(libc,'fopen')        # Get its fopen
        cfopen.restype = ctypes.POINTER(FILE) # Yes, fopen gives a file pointer
        cfopen.argtypes = [ctypes.c_char_p, ctypes.c_char_p] # Yes, fopen gives a file pointer 
        fp = cfopen('stdout_temp.txt'.encode('utf-8'),'w'.encode('utf-8'))    # Use that fopen 

        try:
            if sys.platform.startswith('win'):
                exitflag = _lib.FORCES_CMPC_solve( ctypes.byref(params_py), ctypes.byref(outputs_py), ctypes.byref(info_py), None )
            else:
                exitflag = _lib.FORCES_CMPC_solve( ctypes.byref(params_py), ctypes.byref(outputs_py), ctypes.byref(info_py), fp )
            libc.fclose(fp)
            fptemp = open('stdout_temp.txt','r')
            print (fptemp.read())
            fptemp.close()            
        except:
            #print 'Problem with solver'
            raise

    # convert outputs
    for out in FORCES_CMPC_outputs:
        FORCES_CMPC_outputs[out] = npct.as_array(getattr(outputs_py,out))

    return FORCES_CMPC_outputs,int(exitflag),info_py

solve = FORCES_CMPC_solve


